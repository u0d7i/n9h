--- rx-51.orig	2015-08-15 20:51:58.920386213 +0300
+++ rx-51.mod	2016-02-01 22:04:28.816632000 +0200
@@ -397,22 +397,22 @@
     key <AC02>	{ [	s,		S,		plus,		plus		] };
     key <AC03>	{ [	d,		D,		numbersign,	numbersign	] };
     key <AC04>	{ [	f,		F,		minus,		minus		] };
-    key <AC05>	{ [	g,		G,		underscore,	underscore	] };
-    key <AC06>	{ [	h,		H,		parenleft,	parenleft	] };
-    key <AC07>	{ [	j,		J,		parenright,	parenright	] };
-    key <AC08>	{ [	k,		K,		ampersand,	ampersand	] };
+    key <AC05>	{ [	g,		G,		underscore,	bracketleft	] };
+    key <AC06>	{ [	h,		H,		parenleft,	braceleft	] };
+    key <AC07>	{ [	j,		J,		parenright,	braceright	] };
+    key <AC08>	{ [	k,		K,		ampersand,	bracketright	] };
     key <AC09>	{ [	l,		L,		exclam,		exclam		] };
-    key <AB09>	{ [	period,		colon,		question,	question	] };
+    key <AB09>	{ [	period,		colon,		period, 	question	] };
 
     // 3. row
-    key <AB01>	{ [	z,		Z,		sterling,	sterling	] };
+    key <AB01>	{ [	z,		Z,		percent,	sterling	] };
     key <AB02>	{ [	x,		X,		dollar,		dollar		] };
-    key <AB03>	{ [	c,		C,		EuroSign,	EuroSign	] };
+    key <AB03>	{ [	c,		C,		bar,		EuroSign	] };
     key <AB04>	{ [	v,		V,		slash,		slash		] };
     key <AB05>	{ [	b,		B,		backslash,	backslash	] };
     key <AB06>	{ [	n,		N,		quotedbl,	quotedbl	] };
     key <AB07>	{ [	m,		M,		apostrophe,	apostrophe	] };
-    key <SPCE>	{ [	space,		space,		at,		at		] };
+    key <SPCE>	{ [	space,		space,		space,		at		] };
 };
 
 partial hidden alphanumeric_keys
@@ -482,10 +482,8 @@
 
 partial hidden alphanumeric_keys
 xkb_symbols "arrows_4btns" {
-    // standard arrows mapping
-    // normal 2nd level must not be enumerated to allow text selection with Shift key
-    key <UP>	{ type[Group1] = "ONE_LEVEL", symbols[Group1] = [	Up	] };
-    key <LEFT>	{ type[Group1] = "ONE_LEVEL", symbols[Group1] = [	Left	] };
-    key <DOWN>	{ type[Group1] = "ONE_LEVEL", symbols[Group1] = [	Down	] };
-    key <RGHT>	{ type[Group1] = "ONE_LEVEL", symbols[Group1] = [	Right	] };
+    key <UP>	{ type[Group1] = "FOUR_LEVEL",symbols[Group1] = [ Up, asciicircum, PageUp, PageUp ] };
+    key <LEFT>	{ type[Group1] = "FOUR_LEVEL", symbols[Group1] = [ Left, less, Escape, Escape ] };
+    key <DOWN>	{ type[Group1] = "FOUR_LEVEL", symbols[Group1] = [ Down, asciitilde, PageDown, PageDown ] };
+    key <RGHT>	{ type[Group1] = "FOUR_LEVEL", symbols[Group1] = [ Right, greater, Tab, Tab ] };
 };
